# generated by hamstersql
from sqlalchemy import text

import core


# one: 
def find_user(session, name):
    query = text("""
select * from users where name = :name
    """)
    params = {
        "name": name,
    }
    result = session.execute(query, params)
    return core.convert_result_to_one_row(result)


# many: 
def search_users(session, pattern):
    query = text("""
select * from users where name like :pattern
    """)
    params = {
        "pattern": pattern,
    }
    result = session.execute(query, params)
    return core.convert_result_to_many_rows(result)


# many: 
def list_users(session):
    query = text("""
select * from users
    """)
    params = {
    }
    result = session.execute(query, params)
    return core.convert_result_to_many_rows(result)


# affected: Update the name of a user
def update_name(session, name, user_id):
    query = text("""
update users set name = :name
where user_id = :user_id
    """)
    params = {
        "name": name,
        "user_id": user_id,
    }
    result = session.execute(query, params)
    return core.convert_result_to_affected_rows(result)


# scalar: get the name for a given user_id
def get_name(session, user_id):
    query = text("""
select name from users where user_id = :user_id
    """)
    params = {
        "user_id": user_id,
    }
    result = session.execute(query, params)
    return core.convert_result_to_scalar(result)


# insert: insert a new user
def insert_user(session, name, age, email):
    query = text("""
INSERT INTO users (name, age, email) VALUES (:name, :age, :email);
    """)
    params = {
        "name": name,
        "age": age,
        "email": email,
    }
    result = session.execute(query, params)
    return core.convert_result_to_insert_id(result)


# none: creates a user table
def create_users_table(session):
    query = text("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER NOT NULL,
    email TEXT NOT NULL UNIQUE
);
    """)
    params = {
    }
    result = session.execute(query, params)
    return result


# scalar: find a user's name by their id
def find_user_name_by_id(session, id):
    query = text("""
select name from users where id = :id
    """)
    params = {
        "id": id,
    }
    result = session.execute(query, params)
    return core.convert_result_to_scalar(result)


# affected: delete all users with a given age
def delete_users_with_age(session, age):
    query = text("""
delete from users where age = :age
    """)
    params = {
        "age": age,
    }
    result = session.execute(query, params)
    return core.convert_result_to_affected_rows(result)


